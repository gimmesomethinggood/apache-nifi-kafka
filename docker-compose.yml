version: '3.7'

services:
  zookeeper:
    hostname: zookeeper
    image: 'bitnami/zookeeper:latest'
    ports:
      - "2181:2181"
    environment:
       - ALLOW_ANONYMOUS_LOGIN=yes

  kafka:
    image: confluentinc/cp-server:6.1.1
    hostname: kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "9101:9101"
    volumes:
      - ./shared-assets/jmx-exporter/:/usr/share/jmx-exporter
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://kafka:9092
      KAFKA_METRIC_REPORTERS: io.confluent.metrics.reporter.ConfluentMetricsReporter
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_CONFLUENT_LICENSE_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_CONFLUENT_BALANCER_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_JMX_PORT: 9101
      KAFKA_JMX_HOSTNAME: localhost
      KAFKA_CONFLUENT_SCHEMA_REGISTRY_URL: http://0.0.0.0:8081
      CONFLUENT_METRICS_REPORTER_BOOTSTRAP_SERVERS: kafka:9092
      CONFLUENT_METRICS_REPORTER_TOPIC_REPLICAS: 1
      CONFLUENT_METRICS_ENABLE: 'true'
      CONFLUENT_SUPPORT_CUSTOMER_ID: 'anonymous'

  kafdrop:
    image: obsidiandynamics/kafdrop
    hostname: kafdrop
    ports:
      - "9000:9000"
    environment:
      KAFKA_BROKERCONNECT: "kafka:9092"
    depends_on:
      - kafka

  schema-registry:
    image: confluentinc/cp-schema-registry:6.1.1
    hostname: schema-registry
    depends_on:
      - kafka
    ports:
      - "8081:8081"
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: 'kafka:9092'
      SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8081

  ksqldb-server:
    image: confluentinc/cp-ksqldb-server:6.1.1
    hostname: ksqldb-server
    depends_on:
      - kafka
    ports:
      - "8088:8088"
    environment:
      KSQL_CONFIG_DIR: "/etc/ksql"
      KSQL_BOOTSTRAP_SERVERS: "kafka:9092"
      KSQL_HOST_NAME: ksqldb-server
      KSQL_LISTENERS: "http://0.0.0.0:8088"
      KSQL_CACHE_MAX_BYTES_BUFFERING: 0
      KSQL_KSQL_SCHEMA_REGISTRY_URL: http://schema-registry:8081
      KSQL_PRODUCER_INTERCEPTOR_CLASSES: "io.confluent.monitoring.clients.interceptor.MonitoringProducerInterceptor"
      KSQL_CONSUMER_INTERCEPTOR_CLASSES: "io.confluent.monitoring.clients.interceptor.MonitoringConsumerInterceptor"
      KSQL_KSQL_CONNECT_URL: "http://connect:8083"
      KSQL_KSQL_LOGGING_PROCESSING_TOPIC_REPLICATION_FACTOR: 1
      KSQL_KSQL_LOGGING_PROCESSING_TOPIC_AUTO_CREATE: 'true'
      KSQL_KSQL_LOGGING_PROCESSING_STREAM_AUTO_CREATE: 'true'

  ksqldb-cli:
    image: confluentinc/cp-ksqldb-cli:6.1.1
    depends_on:
      - kafka
      - ksqldb-server
    entrypoint: /bin/sh
    tty: true

  schema-registry-ui:
    image: landoop/schema-registry-ui
    depends_on:
      - schema-registry
    hostname: schema-registry-ui
    ports:
      - 8001:8000
    environment:
      SCHEMAREGISTRY_URL: http://schema-registry:8081
      PROXY: "true"

  kafka-topics-ui:
    image: landoop/kafka-topics-ui:0.9.4
    hostname: kafka-topics-ui
    ports:
      - 8000:8000
    environment:
      SCHEMAREGISTRY_UI_URL: http://schema-registry-ui:8001
      KAFKA_REST_PROXY_URL: http://192.168.1.150:8082
      PROXY: "true"
    depends_on:
      - zookeeper
      - schema-registry
      - rest-proxy

  rest-proxy:
    image: confluentinc/cp-kafka-rest:6.1.1
    depends_on:
      - kafka
      - schema-registry
    ports:
      - 8082:8082
    hostname: rest-proxy
    environment:
      KAFKA_REST_HOST_NAME: rest-proxy
      KAFKA_REST_BOOTSTRAP_SERVERS: 'kafka:9092'
      KAFKA_REST_LISTENERS: "http://0.0.0.0:8082"
      KAFKA_REST_SCHEMA_REGISTRY_URL: http://schema-registry:8081

  nifi:
    image: apache/nifi:1.12.1
    hostname: nifi
    ports:
      - "8080:8080"
    depends_on:
      - zookeeper
    environment:
       NIFI_WEB_HTTP_PORT: 8080
       NIFI_CLUSTER_IS_NODE: 'true'
       NIFI_CLUSTER_NODE_PROTOCOL_PORT: 8082
       NIFI_ZK_CONNECT_STRING: "zookeeper:2181"
       NIFI_ELECTION_MAX_WAIT: "1 min"
       NIFI_ZK_ROOT_NODE: "/nifi"

  producer:
    build: ./producer
    depends_on:
      - zookeeper
    environment:
      API_COVID: "https://api.covid19api.com/summary"
      TOPIC: kafka-nifi-src
      BOOTSTRAP_SERVER: "kafka:9092"

  consumer:
    build: ./consumer
    depends_on:
      - zookeeper
    environment:
      TOPIC: kafka-nifi-dst
      BOOTSTRAP_SERVER: "kafka:9092"
